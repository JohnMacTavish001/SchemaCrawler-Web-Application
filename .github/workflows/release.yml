name: Create Release

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - '*'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+.[0-9]+-[A-Z]

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: cache-m2
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - id: cache-ivy2
      name: Cache Ivy packages
      uses: actions/cache@v2
      with:
        path: ~/.ivy2
        key: ${{ runner.os }}-ivy2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-ivy2
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v2
    - id: setup-jdk
      name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 8
        server-id: sonatype-nexus
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    - id: install-packages
      name: Install packages
      run: |
        # Install Graphviz
        sudo apt-get -qq update
        sudo apt-get -q install graphviz
    - id: show-environment
      name: Show environment
      run: |
        # Show environment
        echo github.repository: ${{ github.repository }}
        echo github.ref: ${{ github.head_ref || github.ref }}
        echo github.sha: ${{ github.sha }}
        mvn -v
        cat ~/.m2/settings.xml

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build and test for distribution
      run: |
        # Build
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddocker.skip=false \
          clean install

# PUBLISH DOCKER IMAGE
    - id: publish-docker-image
      name: Publish Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        # Publish Docker image
        docker version
        docker tag docker.io/schemacrawler/schemacrawler-webapp docker.io/schemacrawler/schemacrawler-webapp:v16.11.7.5
        docker tag docker.io/schemacrawler/schemacrawler-webapp docker.io/schemacrawler/schemacrawler-webapp:latest
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push docker.io/schemacrawler/schemacrawler-webapp
        docker logout

# RELEASE ON HEROKU
    - id: release-on-heroku
      name: Release on Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        HEROKU_APP_NAME: schemacrawler-webapp
      if: false
      run: |
        # Release on Heroku
        docker tag docker.io/schemacrawler/schemacrawler-webapp registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
        echo "$(heroku auth:token)" | docker login --username=_ --password-stdin registry.heroku.com
        docker push registry.heroku.com/${{ env.HEROKU_APP_NAME }}/web
        docker logout
        heroku container:login --verbose
        heroku container:release --verbose --app ${{ env.HEROKU_APP_NAME }} web

# RELEASE ON AWS FARGATE
    - id: configure-aws-credentials
      name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    - id: login-ecr
      name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
    - id:
      name: Push image to Amazon ECR
      env:
        # public.ecr.aws/j3y1s4q8/schemacrawler-webapp-repo
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: schemacrawler-webapp-repo
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Push to Amazon ECR
        echo "Registry: $ECR_REGISTRY/$ECR_REPOSITORY"
        docker tag docker.io/schemacrawler/schemacrawler-webapp  $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag docker.io/schemacrawler/schemacrawler-webapp $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker tag docker.io/schemacrawler/schemacrawler-webapp  $ECR_REGISTRY/$ECR_REPOSITORY:v16.11.7.5
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker logout

# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          SchemaCrawler Webapp Release ${{ github.sha }}
        draft: false
        prerelease: false
    - id: upload-release-zip
      name: Upload SchemaCrawler Webapp distribution
      uses: actions/upload-release-asset@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./target/schemacrawler-webapp-16.11.7.5.jar
        asset_name: schemacrawler-webapp-16.11.7.5.jar
        asset_content_type: application/zip
